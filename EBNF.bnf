<<
%include "../EBNF/EBNFix.asm"
>>
Rum	 = 	Message('Starting..')	, F2I (sConcat(sCLArg(1),'.bnf'))	, Message('Loaded source..Compiled items: ')
					, I2O (*Grammar)			, Message('Grammar OK..')
					, O2F (sConcat(sCLArg(1),'.asm'))	, Message('Saved object.. Done !', 0x0A)
    					| ErrorMessage('Aj, some error');

GrammarEOF = Grammar, EOF;

pLetter		= 'a'..'z' | 'A'..'Z' | "_" ;
pDigit		= '0'..'9';
pSymbol 	= '[' | ']' | '{' | '}' | '(' | ')' | '<' | '>' | '=' | '|' | '.' |
		  '!' | ^35 | ',' | ';' | '+' | '-' | ':' | '&' | '^' | '*' | '\' |
		  '_' | '?' | '@' | '/' | ^36 | ^37 ;
pCtrlChar	= ^09 | ^10 | ^13 ;
pCharacter	= pLetter| pDigit| pSymbol| pCtrlChar| " ";
pHexChar	= '0'..'9' |'a'..'f'| 'A'..'F';
pComment	= '/*' , {^0..^255-'*/'} , '*/' ;

pCode		= {'<<' , {^0..^255-'>>'},					<.	call pOut.>	
										<.	 db 1, 10.>
										<.	call pOutLI.>,
					  '>>' , {pCtrlChar|" "}}*;
				  
pCodeCond	= {'<.' , {^0..^255-'.>'},					<.	call pOut.>
										<.	 db 1, 10.>
										<.	call pOutLI.>,
					  '.>' , {pCtrlChar|" "}}*;


pS		= {' ' |pCtrlChar |pComment| pCode};
pInteger	= pDigit, {pDigit};
pIdentifier	= pLetter, { pLetter | pDigit } ;

pTerminal	= pS,
		(('0x', 16*pHexChar)						,
										<.	call pOut.>
										<.	 db 20, 10, 9, "call pIntervalQuad".>	
										<.	call pOut.>
										<.	 db 6, 10, 9, ' dq '.>
										<.	call pOutLI.>
				    , pS,'..', pS, ('0x', 16*pHexChar) 		,
				    						<.	call pOut.>
										<.	 db 6, 10, 9, ' dq '.>
										<.	call pOutLI.>			
		|('0x', 16*pHexChar)						,
										<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>	
										<.	call pOut.>
										<.	 db 13, 10, 9, ' db 8', 10, 9, ' dq '.>
										<.	call pOutLI.>
		|('0x', 2*pHexChar)						,
										<.	call pOut.>
										<.	 db 16, 10, 9, "call pInterval".>
										<.	call pOut.>
										<.	 db 6, 10, 9, " db ".>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 2, ", ".>
			       , pS,'..', pS, ('0x', 2*pHexChar)		,
			      	     						<.	call pOutLI.>
		| ("0x", 2*pHexChar)						,
										<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>
		      								<.	call pOut.>
							     			<.	 db 8, 10, 9, " db 0x".>
		 								<.	mov r15, rOutPnt.>
		      								<.	call pOut.>
							     			<.	 db 4, 1, 0, ", ".>
							     			<.	call pOutLI.>
			,{" ", pS, (2*pHexChar)					,
										<.	inc byte [r15].>
										<.	call pOut.>
										<.	 dB 4, ", 0x".>
										<.	call pOutLI.>
			      			 }				,
				 						<.	mov rdi, r15.>
			        						<.	mov al, [r15].>
			        						<.	call Bin1Hex.>

		|'^', {pDigit}							,
										<.	call pOut.>
										<.	 db 16, 10, 9, "call pInterval".>
										<.	call pOut.>
										<.	 db 6, 10, 9, " db ".>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 2, ", ".>
			       , pS,'..', pS, '^', {pDigit}			,
			      	     						<.	call pOutLI.>
		|'^', {pDigit} 							,
										<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>
										<.	call pOut.>
										<.	 db 9, 10, 9, " db 1, ".>
										<.	call pOutLI.>
		|'>>"', {pCharacter| "'"}					,
										<.	call pOut.>
										<.	 db 14, 10, 9, "call pFindIn".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db  3, ', "'.>
										<.	call pOutLI.>
										<.	call pOut.>
										<. 	 db 1, '"'.>,
			     		 '"'
		|">>'", {pCharacter| '"'},					<.	call pOut.>
										<.	 db 14, 10, 9, "call pFindIn".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db  3, ", '".>
										<.	call pOutLI.>
										<.	call pOut.>
										<. 	 db 1, "'".>,
			     		 "'"
		|"'" ,'"' ,"'",							<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>
										<.	call pOut.>
										<.	 db 11, 10, 9, " db 1, 34".>
										
		|"'", (pCharacter| '"'),					<.	call pOut.>
										<.	 db 16, 10, 9, "call pInterval".>
										<.	call pOut.>
										<.	 db 7, 10, 9, " db '".>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 4, "', '".>,
		  		"'", pS, '..', pS, "'", (pCharacter|'"'),	<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 1, "'".>,
									 "'"
		|"'", {pCharacter| '"'},					<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db 3, ", '".>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 1, "'".>,						
					"'"
		|'"', (pCharacter| "'"),					<.	call pOut.>
										<.	 db 16, 10, 9, "call pInterval".>
										<.	call pOut.>
										<.	 db 7, 10, 9, ' db "'.>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 4, '", "'.>,
		  		'"', pS, '..', pS, '"', (pCharacter|"'"),	<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 1, '"'.>,
							    		 '"'
	 	|'"', {pCharacter| "'"},					<.	call pOut.>
										<.	 db 10, 10, 9, "call pIn".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db 3, ", ", 34.>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 1, 34.>,
					 '"' );

pArgument	= 								<.	call pOut.>
		      								<.	db 8, 10, 9, " db 0x".>
										<.	mov r15, rOutPnt.>
		      								<.	call pOut.>
						     				<.	 db 4, 0, 0, ", ".>,
		( ("'", {^0..^255-"'"						,<.	inc byte [r15].>
					}, "'") |
		  ('"', {^0..^255-'"'						,<.	inc byte [r15].>
					}, '"') |
		  ("0x", 2*pHexChar)						,<.	inc byte [r15].>
		)								,<.	call pOutLI.>

		, {pS, ",", pS, (("'",{^0..^255-"'"				,<.	inc byte [r15].>
		     				        }, "'") |
				 ('"',{^0..^255-'"'				,<.	inc byte [r15].>
		     				        }, '"') |
				 ("0x", 2*pHexChar				,<.	inc byte [r15].>
						  ))}				,<.	call pOutLI.>
										<.	mov rdi, r15.>
										<.	mov al, [r15].>
										<.	call Bin1Hex.>
		|pInteger							,<.	call pOut.>
										<.	 db 6, 10, 9, " dq ".>
										<.	call pOutLI.>
			 , {pS, ",", pS, (pInteger) 				,<.	call pOut.>
										<.	 db 6, 10, 9, " dq ".> 
										<.	call pOutLI.>
						     }
		|"*", pIdentifier						,<.	call pOut.>
										<.	 db 6, 10, 9, " dq ".>
										<.	call pOutLI.>
			 , {pS, ",", pS, "*", pIdentifier			,<.	call pOut.>
										<.	 db 6, 10, 9, " dq ".> 
										<.	call pOutLI.>
						     };
						     

pFunction	= (("pOut"|"IsBit1"| "IsBit"|"Message"| "ErrorMessage"| "LIStore"| "SetBitMapCur"),		/* Exception list for inline parameters */
										<.	call pOut.>
										<.	 db 7, 10, 9, "call ".>
										<.	call pOutLI.>,
				pS, '(', pS, pArgument, pS, ')')
		  |pIdentifier,
		  
			  (pS, '(', pS, (pFunction|pInteger			,<.	call pOut.>
		    								<.	 db 7, 10, 9, "push ".>
		    								<.	call pOutLI.>
		    		  			  |"*", pIdentifier	,<.	call pOut.>
		    								<.	 db 7, 10, 9, "push ".>
		    								<.	call pOutLI.>
		    					  | StringExp		    )

			, {pS, ',', pS, (pFunction|pInteger			,<.	call pOut.>
		    								<.	 db 7, 10, 9, "push ".>
		    								<.	call pOutLI.>
							  
		    		  			  |"*", pIdentifier	,<.	call pOut.>
		    								<.	 db 7, 10, 9, "push ".>
		    								<.	call pOutLI.>
		    					  | StringExp
		    							    ) }, pS,  ')' )
		    							    
		    							    	,<.	call pOut .>
										<.	 db 7, 10, 9, "call ".>
										<.	call pOutPI.>
		  |pIdentifier							,<.	call pOut .>
										<.	 db 7, 10, 9, "call ".>
										<.	call pOutLI.>;


pFunctionList = pFunction , { pS, pFunction };



			/* todo proper expr with "&" */
StringExp	= "'", {pCharacter| '"'}					,<.	call pOut.>
										<.	 db 12, 10, 9, "call sPush".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db 3, ", '".>
										<.	call pOutLI.>
					, "'"					,<.	call pOutLI.>
		| '"', {pCharacter| "'"}					,<.	call pOut.>
										<.	 db 12, 10, 9, "call sPush".>
										<.	call pOut.>
										<.	 db 8, 10, 9, " db 0x".>
										<.	call pOutLILen.>
										<.	call pOut.>
										<.	 db 3, ', "'.>
										<.	call pOutLI.>
					, '"'					,<.	call pOutLI.>
						;

OptionalSequence= pS, '[',							<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>,
			   DefinitionsList, pS, ']',				<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".>
										<.	call pOut.>
										<.	 db 16, 10, 9, "xor rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 10, 10, 9, "inc rPOk".> ;

RepeatedSequence= pS, '{',							<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>
										<.	call pOut.>
										<.	 db 6, 10, "RSRep".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 1, ":".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>,
			   DefinitionsList, pS, '}',				<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".>
										<.	call pOut.>
										<.	 db 13, 10, 9, "jrcxz RSEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 25, 10, 9, "or rInEndFlg, rInEndFlg".>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jnz RSEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp RSRep".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 6, 10, "RSEnd".>
										<.	call LblCls.>
										<.	call pOut.>
										<.	 db 1, ":".>
										<.	call pOut.>
										<.	 db 16, 10, 9, "xor rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 10, 10, 9, "inc rPOk".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".> ;
		
KleeneSequence= pS, '{',							<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>
										<.	call pOut.>
										<.	 db 6, 10, "KSRep".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 1, ":".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>,
			DefinitionsList, pS, '}*',				<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".>
										<.	call pOut.>
										<.	 db 10, 10, 9, "jrcxz KS".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 25, 10, 9, "or rInEndFlg, rInEndFlg".>
										<.	call pOut.>
										<.	 db 8, 10, 9, "jnz KS".>
										<.	call LblUse.>
										
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp KSRep".>
										<.	call LblUse.>
										
										<.	call pOut.>
										<.	 db 3, 10, "KS".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>
										<.	call pOut.>
										<.	 db 16, 10, 9, "xor rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 22, 10, 9, "cmp rInPnt, [rsp+56]".>
										<.	call pOut.>
										<.	 db 10, 10, 9, "jz KSEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 10, 10, 9, "inc rPOk".>
										<.	call pOut.>
										<.	 db 6, 10, "KSEnd".>
										<.	call LblCls.>
										<.	call pOut.>
										<.	 db 1, ":".>
										
										<.	call pOut.>
										<.	 db 13, 10, 9, "add rsp, 64".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".> ;
										
GroupedSequence = pS, '(',							<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>,
			   DefinitionsList, pS, ')'				,<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".> ;

Primary	= pS,	( OptionalSequence
		| KleeneSequence
		| RepeatedSequence
		| pTerminal
		| GroupedSequence
		| pFunctionList
		| pCodeCond);
		
Exception	=								<.	call pOut.>
										<.	 db 15, 10, 9, "or rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jnz ExChk".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp ExEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 6, 10, "ExChk".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>
										<.	call pOut.>
										<.	 db 24, 10, 9, "sub rInPnt, rLastInLen".>,
			Term,							<.	call pOut.>
										<.	 db 18, 10, 9, "call cDropExcept".>
										<.	call pOut.>
										<.	 db 6, 10, "ExEnd".>
										<.	call LblCls.>
										<.	call pOut.>
										<.	 db 1, ":".>	;

Factor	=  Primary, pS, [ ( '**'						,<.	call pOut.>
										<.	 db 9, 10, 9, "pop rax".>
										<.;	call pOut.>
										<.;	 db 12, 10, 9, "call cPush".>
				| '*'						,<.;	call pOut.>
										<.;	 db 12, 10, 9, "call cPush".>
			      							<.	call pOut.>
			      							<.	 db 14, 10, 9, "call Dec2Bin".>
			      	    )						,<.	call pOut.>
										<.	 db 19, 10, 9, "mov rFactCnt, rax".>	
										<.	call pOut.>
										<.	 db 13, 10, 9, "or rax, rax".>
										<.	call pOut.>
										<.	 db 12, 10, 9, "jnz FacRep".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 12, 10, 9, "jmp FacEnd".>
										<.	call LblUse.>			

										<.	call pOut.>
										<.	 db 7, 10, "FacRep".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>

			     , Primary						,<.	call pOut.>
										<.	 db 14, 10, 9, "dec rFactCnt".>
										<.	call pOut.>
										<.	 db 14, 10, 9, "jrcxz FacEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jz FacEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 12, 10, 9, "jmp FacRep".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 7, 10, "FacEnd".>
										<.	call LblCls.>
										<.	call pOut.>
										<.	 db 1,":".>

										<.;	call pOut.>
										<.;	 db 12, 10, 9, "call cDrop".>
				      ]
	| pS, pInteger								,<.	call pOut.>
										<.	 db 16, 10, 9, "mov rFactCnt, ".>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 23, 10, 9, "or rFactCnt, rFactCnt".>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jz FacEnd".>
										<.	call LblNew.>

										<.	call pOut.>
										<.	 db 7, 10, "FacRep".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>

						  , pS, '*', Primary		,<.	call pOut.>
										<.	 db 14, 10, 9, "dec rFactCnt".>
						     				<.	call pOut.>
										<.	 db 14, 10, 9, "jrcxz FacEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jz FacEnd".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 12, 10, 9, "jmp FacRep".>
										<.	call LblUse.>	
										<.	call pOut.>
										<.	 db 7, 10, "FacEnd".>
										<.	call LblCls.>
										<.	call pOut.>
										<.	 db 1, ":".>	;

Term	= Factor, [pS, '-', Exception];

SingleDefinition= Term	, [							<.	call LblPush.>
			    , {pS, ','						,<.	call pOut.>
										<.	 db 15, 10, 9, "or rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 8, 10, 9, "jnz SD".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp SDEnd".>
										<.	call LblTop.>
										<.	call pOut.>
										<.	 db 3,10, "SD".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>
				        , Term }*				,<.	call pOut.>
										<.	 db 6,10, "SDEnd".>
										<.	call LblTop.>
										<.	call pOut.>
										<.	 db 1, ":".>
						   ];


				   
				   
				   	 
AndDefinition	= SingleDefinition, [						<.	call LblPush.>
			              ,  {pS, '+'				,<.	call pOut.>
										<.	 db 15, 10, 9, "or rPOk, rPOk".>
										<.	call pOut.>
										<.	 db 8, 10, 9, "jnz AD".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp ADEnd".>
										<.	call LblTop.>
										
										<.	call pOut.>
										<.	 db 3, 10, "AD".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 1, ":".>
										
										<.	call pOut.>
										<.	 db 17, 10, 9, "call cAndProlog".>
					         , SingleDefinition		,<.	call pOut.>
										<.	 db 17, 10, 9, "call cAndEpilog".>
								     }*		,<.	call pOutLbl.>
										<.	 db 6, 10, "ADEnd".>
						    	                ];

DefinitionsList = AndDefinition, [						<.	call LblPush.>
			           , { pS, '|'					,<.	call pOut.>
										<.	 db 10, 10, 9, "jrcxz DL".>
										<.	call LblNew.>
										<.	call pOut.>
										<.	 db 11, 10, 9, "jmp DLEnd".>
										<.	call LblTop.>
										<.	call pOut.>
										<.	 db 3, 10, "DL".>
										<.	call LblUse.>
										<.	call pOut.>
										<.	 db 9, ":", 9, "inc rcx".>
										<.	call pOut.>
										<.	 db 11, 10, 9, "call cTop".>
					         , AndDefinition }*		,<.	call pOutLbl.>
										<.	 db 6, 10, "DLEnd".>
 								    ];

pRule		= pS, pIdentifier,						<.	call pOut.>
										<.	 db 81, 10, ";xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",10.>
										<.	call pOutLI.>
										<.	call pOut.>
										<.	 db 1, ":".>,
			 	  pS,('=',					<.	call pOut.>
										<.	 db 12, 10, 9, "call cPush".>,
					 [DefinitionsList], pS, ';',		<.	call pOut.>
										<.	 db 12, 10, 9, "call cDrop".>
										<.	call pOut.>
										<.	 db 6, 10, 9, "ret", 10.> 
				     |'()', pS, '=',				<.	call pOut.>
										<.	 db 20, 10, 9, "call cOpenTextGram".>,
					 [DefinitionsList], pS, ';',		<.	call pOut.>
										<.	 db 21, 10, 9, "call cCloseTextGram".>
										<.	call pOut.>
										<.	 db 6, 10, 9, "ret", 10.>
				     |'(h,h)', pS, '=',				<.	call pOut.>
										<.	 db 19, 10, 9, "call cOpenH2HGram".>,
					 [DefinitionsList], pS, ';',		<.	call pOut.>
										<.	 db 20, 10, 9, "call cCloseH2HGram".>
										<.	call pOut.>
										<.	 db 6, 10, 9, "ret", 10.>
				     );


Grammar	= pS, {									<.	mov InPntOld, rInPnt.>
			, pRule, pS,						<.	call OutSrcLin.>
										<.	call DspLstTrm.>
				     } ;


